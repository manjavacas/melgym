About MELGYM
============

.. image:: ../_static/logo.png
    :align: center
    :scale: 30 %

**MELGYM** is a Python library designed to facilitate interactive control over `MELCOR 1.8.6 <https://en.wikipedia.org/wiki/MELCOR>`_ simulations.

Every control functionality in MELCOR is determined by *Control Functions* (CFs). However, the batch execution mode of MELCOR makes it difficult to interactively control and modify functions under certain user-defined conditions. 
Control conditions are defined a priori and sometimes requires the concatenation of several CFs that must be done in an unfriendly way.

MELGYM allows the definition of external user-defined controllers, allowing the use of **reinforcement learning** agents or any other custom/external **control** algorithm.


How MELGYM works
################

The control performed by MELGYM is mainly based on MELCOR's **restart** capabilities. The restart process in MELCOR involves:

1. Dumping data about the current state of the simulation into the *restart file* generated by MELGEN (i.e., recording a *simulatiom checkpoint*).
2. A subsequent warm start from the last recorded simulation state.

.. image:: ../_static/melcor.png
    :align: center
    :scale: 6 %

These two steps are performed periodically, according to the restart frequency defined by the user in the MELCOR input configuration.

MELGYM introduces an **intermediate step** between every restart dump + warm start, in which the modification of the control functions or any other user-defined components of the model takes place.

This allows to **discretise** the simulations in small time intervals, adding intermediate steps where the model is continuously modified.

.. image:: ../_static/restarts.png
    :align: center
    :scale: 6 %

.. note:: Those elements modifiable by MELGYM are determined by the overwrite capabilities of the MELCOR input. See the `MELCOR code manual <https://www.sandia.gov/MELCOR/publications/>`_ for more information.

On this basis, MELGYM modifies the model every few simulation cycles. Each time a warm start is performed, the model starts from the last registered state and continues simulating under the new configuration defined by the external controller.

.. image:: ../_static/restart.png
    :align: center
    :scale: 20 %


Reinforcement learning integration
##################################

... TO-DO


...


See also
########

.. seealso:: Following this introduction, go to :ref:`examples` to look at different usage examples of MELGYM.